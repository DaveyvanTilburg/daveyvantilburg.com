@{
    ViewBag.Title = "Home Page";
}

@section css
{
    <link rel="stylesheet" href="~/css/home.css" />
    <style>
        #divPhaseTwo{
            display:none;
        }

        #divTypeOptions label{
            margin: 0 0 0 0;
        }

        #saveLoadWrapper {
            display:none;
        }

        #saveLoadConsole {
            width:100%;
            height:300px;
        }
    </style>
}
<form target="_blank" action="/ExportAnything/Export" method="post">
    <div id="divPhaseOne">
        <h1>Select type:</h1>
        
        <div id="divTypeOptions">

        </div>

        <a href="#" id="divSubmitOne">Select</a>
    </div>
    
    <div id="divPhaseTwo">
        <h1>Design output:</h1>

        <div class="column-selections">
        </div>

        <div>
            <input type="radio" id="exportTypeCsv" name="exportType" value="csv" checked/>
            <label for="exportTypeCsv">CSV</label>

            <input type="radio" id="exportTypeJson" name="exportType" value="json"/>
            <label for="exportTypeJson">JSON</label>

            <input type="radio" id="exportTypeExcel" name="exportType" value="xlsx"/>
            <label for="exportTypeExcel">EXCEL</label>

            <input type="radio" id="exportTypePdf" name="exportType" value="pdf"/>
            <label for="exportTypePdf">PDF</label>
        </div>

        <input type="submit" value="Download"/>
    </div>
    
    <a href="#" id="saveLoadToggle">save/load</a>
    <div id="saveLoadWrapper">
        <a href="#" id="saveButton">Save</a>
        <a href="#" id="loadButton">Load</a>

        <textarea id="saveLoadConsole"></textarea>
    </div>
</form>

@section Scripts
{
    <script src="js/jquery.js"></script>
    <script>
        $(function(){
            $('#saveLoadConsole').val('');

            function objectType() {
                return $('input[name=typeSelection]:checked').val();
            }
            
            function columns() {
                let columns = $('.column-selection');
                
                let result = columns.map(function() {
                    let column = $(this);
                    
                    return {
                        name: column.find('.column').val(),
                        alias: column.find('.alias').val()
                    }
                }).toArray();

                return result;
            }
            
            $(document).on('click', '#saveLoadToggle', function (e) {
                e.preventDefault();
                $('#saveLoadWrapper').toggle();
                return false;
            });

            $(document).on('click', '#saveButton', function (e) {
                e.preventDefault();

                let composed = {
                    type: objectType(),
                    columns: columns()
                }
                
                let serialized = JSON.stringify(composed);
                $('#saveLoadConsole').val(serialized);
                
                return false;
            });
            
            $(document).on('click', '#loadButton', function (e) {
                e.preventDefault();
                
                let serialized = $('#saveLoadConsole').val();
                let deserialized = JSON.parse(serialized);

                $('input[name=typeSelection]').prop('checked', false);
                $(`input[name=typeSelection][value=${deserialized.type}]`).prop('checked', true);

                $('.column-selections .column-selection').remove();
                
                deserialized.columns.forEach(function(column) {
                    let isChecked = column.alias !== undefined;
                    let checkedProperty = isChecked ? ' checked="checked"' : '';
                    let div = $(`<div id="${column.name}" class="column-selection dropzone"><input class="column" type="checkbox" name="columns" value="${column.name}"${checkedProperty}}><span draggable="true">${column.name}</span></div>`);
                    
                    if(isChecked){
                        div.addClass('output');
                        div.append(`<input class="alias" type="text" name="aliases" value="${column.alias}" />`);
                        div.append(`<input class="index" type="text" name="indexes" value="0" readonly="readonly" />`);
                    }
                    
                    $('.column-selections').append(div);
                });

                $('#divPhaseOne').css('display', 'none');
                $('#divPhaseTwo').css('display', 'block');

                updateAllIndexes();

                return false;
            });
            
            $(document).on('click', '#loadButton', function(e) {
                e.preventDefault();
                let serialized = $('#saveLoadConsole').val();
                return false;
            });

            $.get('/ExportAnything/Types', function(result){
                let types = eval(result);
                types.forEach(function(t){
                    $('#divTypeOptions').append(`<div><input id="type${t}" type="radio" name="typeSelection" value="${t}"><label for="type${t}">${t}</label></div>`);
                });
            });

            $(document).on('click', '#divSubmitOne', function(e) {
                e.preventDefault();

                let type = objectType();
                $.get(`/ExportAnything/TypeDefinition?typeSelection=${type}`, function(result){
                    let typeDefinition = eval(result);
                    
                    typeDefinition.forEach(function (p) {
                        $('.column-selections').append(`<div id="${p}" class="column-selection dropzone"><input class="column" type="checkbox" name="columns" value="${p}"><span draggable="true">${p}</span></div>`);
                    });

                    $('#divPhaseOne').css('display', 'none');
                    $('#divPhaseTwo').css('display', 'block');
                });
                
                return false;
            });

            
            $(document).on('change', '.column', function(){
                let checked = $(this).is(':checked');
                let div = $(this).closest('.column-selection');
                
                if(checked){
                    div.addClass('output');
                    div.append(`<input class="alias" type="text" name="aliases" value="${$(this).val()}" />`);
                    div.append(`<input class="index" type="text" name="indexes" value="0" readonly="readonly" />`);
                } else {
                    div.removeClass('output');
                    div.find('.alias').remove();
                    div.find('.index').remove();
                }
                updateAllIndexes();
            });
            
            function updateAllIndexes(){
                let outputs = $('.column-selection.output');
                outputs.each(function(div){
                    let index = $('.column-selection.output').index(this);
                    $(this).find('.index').val(index + 1);
                });
            }
            
            class Draggables{
                constructor(){
                    this.dragged = null;
                    this.index = null;
                    this.list = null;
                }
                
                init() {
                    let self = this;

                    document.addEventListener("dragstart", (event) => {
                        let target = event.target;
                        if (target.nodeName !== 'DIV')
                            target = $(target).closest('div.dropzone')[0];

                        self.dragged = target;
                        self.list = $('DIV.dropzone');
                        self.index = self.list.index(self.dragged);

                        event.dataTransfer.setDragImage(target, 0, 0);
                    });

                    document.addEventListener("dragover", (event) => {
                        event.preventDefault();
                    });

                    document.addEventListener("drop", (event) => {
                        let target = event.target;
                        if (target.nodeName !== 'DIV')
                            target = $(target).closest('div.dropzone')[0];

                        if ($(target).hasClass("dropzone") && target.id !== self.dragged.id) {
                            self.dragged.remove(self.dragged);
                            let indexDrop = self.list.index(target);

                            if (self.index > indexDrop) {
                                target.before(self.dragged);
                            } else {
                                target.after(self.dragged);
                            }
                        }

                        updateAllIndexes();
                    });
                }
            }

            new Draggables().init();
        });
    </script>
}